/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lxisoft.client.open_lrw.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.lxisoft.client.open_lrw.model.StatementResult;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-03-29T12:01:52.955+05:30[Asia/Calcutta]")

@Api(value = "XapiApiController", description = "the XapiApiController API")
public interface XapiApiControllerApi {

	@ApiOperation(value = "getStatements", nickname = "getStatementsUsingGET", notes = "", response = StatementResult.class, tags = {
			"xapi-api-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = StatementResult.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/xAPI/statements", produces = "application/json;charset=utf-8", method = RequestMethod.GET)
	ResponseEntity<StatementResult> getStatementsUsingGET(
			@ApiParam(value = "Authorization", required = true) @RequestHeader(value = "Authorization", required = true) String authorization,
			@ApiParam(value = "statementId") @Valid @RequestParam(value = "statementId", required = false) String statementId,
			@ApiParam(value = "page", defaultValue = "0") @Valid @RequestParam(value = "page", required = false, defaultValue = "0") String page,
			@ApiParam(value = "limit", defaultValue = "1000") @Valid @RequestParam(value = "limit", required = false, defaultValue = "1000") String limit);

	@ApiOperation(value = "postStatement", nickname = "postStatementUsingPOST", notes = "", response = String.class, responseContainer = "List", tags = {
			"xapi-api-controller", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = String.class, responseContainer = "List"),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/xAPI/statements", produces = "application/json;charset=utf-8", consumes = "application/json", method = RequestMethod.POST)
	ResponseEntity<List<String>> postStatementUsingPOST(
			@ApiParam(value = "Authorization", required = true) @RequestHeader(value = "Authorization", required = true) String authorization,
			@ApiParam(value = "json", required = true) @Valid @RequestBody String body);

	@ApiOperation(value = "postStatement", nickname = "postStatementUsingPOST1", notes = "", response = String.class, responseContainer = "List", tags = {
			"xapi-api-controller", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = String.class, responseContainer = "List"),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/xAPI/statements/", produces = "application/json;charset=utf-8", consumes = "application/json", method = RequestMethod.POST)
	ResponseEntity<List<String>> postStatementUsingPOST1(
			@ApiParam(value = "Authorization", required = true) @RequestHeader(value = "Authorization", required = true) String authorization,
			@ApiParam(value = "json", required = true) @Valid @RequestBody String body);

}
