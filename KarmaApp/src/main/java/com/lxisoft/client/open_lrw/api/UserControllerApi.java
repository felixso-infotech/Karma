/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lxisoft.client.open_lrw.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.lxisoft.client.open_lrw.model.CollectionEnrollment;
import com.lxisoft.client.open_lrw.model.CollectionEvent;
import com.lxisoft.client.open_lrw.model.CollectionMongoUser;
//import com.lxisoft.client.open_lrw.model.ResponseEntity;
import com.lxisoft.client.open_lrw.model.Result;
import com.lxisoft.client.open_lrw.model.User;
import com.lxisoft.client.open_lrw.model.UserMapping;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-03-29T12:01:52.955+05:30[Asia/Calcutta]")

@Api(value = "UserController", description = "the UserController API")
public interface UserControllerApi {

	@ApiOperation(value = "deleteUser", nickname = "deleteUserUsingDELETE", notes = "", response = ResponseEntity.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ResponseEntity.class),
			@ApiResponse(code = 204, message = "No Content"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden") })
	@RequestMapping(value = "/api/users/{userId}", produces = "*/*", method = RequestMethod.DELETE)
	ResponseEntity<ResponseEntity> deleteUserUsingDELETE(
			@ApiParam(value = "userId", required = true) @PathVariable("userId") String userId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getEnrollmentsForUser", nickname = "getEnrollmentsForUserUsingGET", notes = "", response = CollectionEnrollment.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CollectionEnrollment.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/users/{userId}/enrollments", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<CollectionEnrollment> getEnrollmentsForUserUsingGET(
			@ApiParam(value = "userId", required = true) @PathVariable("userId") String userId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getEventsForUser", nickname = "getEventsForUserUsingGET", notes = "", response = CollectionEvent.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CollectionEvent.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/users/{userId}/events", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<CollectionEvent> getEventsForUserUsingGET(
			@ApiParam(value = "userId", required = true) @PathVariable("userId") String userId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated,
			@ApiParam(value = "from") @Valid @RequestParam(value = "from", required = false) String from,
			@ApiParam(value = "to") @Valid @RequestParam(value = "to", required = false) String to);

	@ApiOperation(value = "getResultsForUser", nickname = "getResultsForUserUsingGET", notes = "", response = Result.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Result.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/users/{userId}/results", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<Result> getResultsForUserUsingGET(
			@ApiParam(value = "userId", required = true) @PathVariable("userId") String userId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getUserMapping", nickname = "getUserMappingUsingGET", notes = "", response = UserMapping.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = UserMapping.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/users/mapping/{externalUserId}", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<UserMapping> getUserMappingUsingGET(
			@ApiParam(value = "externalUserId", required = true) @PathVariable("externalUserId") String externalUserId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getUser", nickname = "getUserUsingGET", notes = "", response = User.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = User.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/users/{userId}", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<User> getUserUsingGET(
			@ApiParam(value = "userId", required = true) @PathVariable("userId") String userId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getUsers", nickname = "getUsersUsingGET1", notes = "", response = CollectionMongoUser.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CollectionMongoUser.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/users", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<CollectionMongoUser> getUsersUsingGET1(
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "postUserMapping", nickname = "postUserMappingUsingPOST", notes = "", response = Object.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Object.class),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/users/mapping", produces = "*/*", consumes = "application/json", method = RequestMethod.POST)
	ResponseEntity<Object> postUserMappingUsingPOST(
			@ApiParam(value = "um", required = true) @Valid @RequestBody UserMapping userMapping,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "post", nickname = "postUsingPOST5", notes = "", response = Object.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Object.class),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/users", produces = "*/*", consumes = "application/json", method = RequestMethod.POST)
	ResponseEntity<Object> postUsingPOST5(@ApiParam(value = "user", required = true) @Valid @RequestBody User user,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated,
			@ApiParam(value = "check") @Valid @RequestParam(value = "check", required = false) Boolean check);

	@ApiOperation(value = "updateUser", nickname = "updateUserUsingPATCH", notes = "", response = ResponseEntity.class, tags = {
			"user-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ResponseEntity.class),
			@ApiResponse(code = 204, message = "No Content"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden") })
	@RequestMapping(value = "/api/users/{userId}", produces = "*/*", consumes = "application/json", method = RequestMethod.PATCH)
	ResponseEntity<ResponseEntity> updateUserUsingPATCH(
			@ApiParam(value = "userId", required = true) @PathVariable("userId") String userId,
			@ApiParam(value = "data", required = true) @Valid @RequestBody String body,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

}
