/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.lxisoft.client.open_lrw.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.lxisoft.client.open_lrw.model.ClassEventStatistics;
import com.lxisoft.client.open_lrw.model.ClassMapping;
import com.lxisoft.client.open_lrw.model.CollectionEnrollment;
import com.lxisoft.client.open_lrw.model.CollectionEvent;
import com.lxisoft.client.open_lrw.model.CollectionLineItem;
import com.lxisoft.client.open_lrw.model.CollectionMongoClass;
import com.lxisoft.client.open_lrw.model.CollectionResult;
import com.lxisoft.client.open_lrw.model.Enrollment;
import com.lxisoft.client.open_lrw.model.LineItem;
import com.lxisoft.client.open_lrw.model.ModelClass;
import com.lxisoft.client.open_lrw.model.Result;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-03-29T12:01:52.955+05:30[Asia/Calcutta]")

@Api(value = "ClassController", description = "the ClassController API")
public interface ClassControllerApi {

	@ApiOperation(value = "getClassMapping", nickname = "getClassMappingUsingGET", notes = "", response = ClassMapping.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ClassMapping.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/mapping/{externalClassId}", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<ClassMapping> getClassMappingUsingGET(
			@ApiParam(value = "externalClassId", required = true) @PathVariable("externalClassId") String externalClassId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getClass", nickname = "getClassUsingGET", notes = "", response = ModelClass.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ModelClass.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<ModelClass> getClassUsingGET(
			@ApiParam(value = "classId", required = true) @PathVariable("classId") String classId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getClass", nickname = "getClassUsingGET1", notes = "", response = CollectionMongoClass.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CollectionMongoClass.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<CollectionMongoClass> getClassUsingGET1(
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getEnrollmentsForClass", nickname = "getEnrollmentsForClassUsingGET", notes = "", response = CollectionEnrollment.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CollectionEnrollment.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/enrollments", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<CollectionEnrollment> getEnrollmentsForClassUsingGET(
			@ApiParam(value = "classId", required = true) @PathVariable("classId") String classId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getEventForClassAndUser", nickname = "getEventForClassAndUserUsingGET", notes = "", response = CollectionEvent.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CollectionEvent.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/events/user/{userId}", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<CollectionEvent> getEventForClassAndUserUsingGET(
			@ApiParam(value = "classId", required = true) @PathVariable("classId") String classId,
			@ApiParam(value = "userId", required = true) @PathVariable("userId") String userId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getEventStatisticsForClass", nickname = "getEventStatisticsForClassUsingGET", notes = "", response = ClassEventStatistics.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = ClassEventStatistics.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/events/stats", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<ClassEventStatistics> getEventStatisticsForClassUsingGET(
			@ApiParam(value = "classId", required = true) @PathVariable("classId") String classId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated,
			@ApiParam(value = "studentsOnly", defaultValue = "true") @Valid @RequestParam(value = "studentsOnly", required = false, defaultValue = "true") String studentsOnly);

	@ApiOperation(value = "getLineItemsForClass", nickname = "getLineItemsForClassUsingGET", notes = "", response = CollectionLineItem.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CollectionLineItem.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/lineitems", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<CollectionLineItem> getLineItemsForClassUsingGET(
			@ApiParam(value = "classId", required = true) @PathVariable("classId") String classId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getLineItemsResults", nickname = "getLineItemsResultsUsingGET", notes = "", response = Result.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Result.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/lineitems/{lineitemId}/results", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<Result> getLineItemsResultsUsingGET(
			@ApiParam(value = "lineitemId", required = true) @PathVariable("lineitemId") String lineitemId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getResultsForClassAndUser", nickname = "getResultsForClassAndUserUsingGET", notes = "", response = CollectionResult.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CollectionResult.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/results/user/{userId}", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<CollectionResult> getResultsForClassAndUserUsingGET(
			@ApiParam(value = "classId", required = true) @PathVariable("classId") String classId,
			@ApiParam(value = "userId", required = true) @PathVariable("userId") String userId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "getResultsForClass", nickname = "getResultsForClassUsingGET", notes = "", response = CollectionResult.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = CollectionResult.class),
			@ApiResponse(code = 401, message = "Unauthorized"), @ApiResponse(code = 403, message = "Forbidden"),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/results", produces = "*/*", method = RequestMethod.GET)
	ResponseEntity<CollectionResult> getResultsForClassUsingGET(
			@ApiParam(value = "classId", required = true) @PathVariable("classId") String classId,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "postClassMapping", nickname = "postClassMappingUsingPOST", notes = "", response = Object.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Object.class),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/mapping", produces = "*/*", consumes = "application/json", method = RequestMethod.POST)
	ResponseEntity<Object> postClassMappingUsingPOST(
			@ApiParam(value = "cm", required = true) @Valid @RequestBody ClassMapping classMapping,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "postClass", nickname = "postClassUsingPOST", notes = "", response = Object.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Object.class),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes", produces = "*/*", consumes = "application/json", method = RequestMethod.POST)
	ResponseEntity<Object> postClassUsingPOST(
			@ApiParam(value = "klass", required = true) @Valid @RequestBody ModelClass modelClass,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated);

	@ApiOperation(value = "postEnrollment", nickname = "postEnrollmentUsingPOST", notes = "", response = Object.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Object.class),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/enrollments", produces = "*/*", consumes = "application/json", method = RequestMethod.POST)
	ResponseEntity<Object> postEnrollmentUsingPOST(
			@ApiParam(value = "classId", required = true) @PathVariable("classId") String classId,
			@ApiParam(value = "enrollment", required = true) @Valid @RequestBody Enrollment enrollment,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated,
			@ApiParam(value = "check") @Valid @RequestParam(value = "check", required = false) Boolean check);

	@ApiOperation(value = "postLineItem", nickname = "postLineItemUsingPOST", notes = "", response = Object.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Object.class),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/lineitems", produces = "*/*", consumes = "application/json", method = RequestMethod.POST)
	ResponseEntity<Object> postLineItemUsingPOST(
			@ApiParam(value = "lineItem", required = true) @Valid @RequestBody LineItem lineItem,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated,
			@ApiParam(value = "check") @Valid @RequestParam(value = "check", required = false) Boolean check);

	@ApiOperation(value = "postResult", nickname = "postResultUsingPOST", notes = "", response = Object.class, tags = {
			"class-controller", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Object.class),
			@ApiResponse(code = 201, message = "Created"), @ApiResponse(code = 401, message = "Unauthorized"),
			@ApiResponse(code = 403, message = "Forbidden"), @ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/api/classes/{classId}/results", produces = "*/*", consumes = "application/json", method = RequestMethod.POST)
	ResponseEntity<Object> postResultUsingPOST(
			@ApiParam(value = "classId", required = true) @PathVariable("classId") String classId,
			@ApiParam(value = "result", required = true) @Valid @RequestBody Result result,
			@ApiParam(value = "") @Valid @RequestParam(value = "details", required = false) Object details,
			@ApiParam(value = "") @Valid @RequestParam(value = "authenticated", required = false) Boolean authenticated,
			@ApiParam(value = "check") @Valid @RequestParam(value = "check", required = false) Boolean check);

}
